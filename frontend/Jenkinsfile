pipeline{

	agent any

	environment {
		DOCKERHUB_CREDENTIALS=credentials('dockerhub')
	}

	stages {

		stage('Build') {

			steps {
			    dir("./frontend") {
					script {
						mattermostSend(color: "#FFFF8C", message: "Jenkins - ${env.BUILD_NUMBER}번째 Frontend 도커 이미지 빌드 시작")
						try {
							sh 'npm i'
							sh 'CI=false npm run build'
							sh 'docker build -t gkuer/joalarm-react:latest .'
							mattermostSend(color: "#FF33FF", message: "Jenkins - ${env.BUILD_NUMBER}번째 Frontend 도커 이미지 빌드 완료")
						} catch(e) {
							mattermostSend(color: "#FF33FF", message: "Jenkins - ${env.BUILD_NUMBER}번째 Frontend 도커 이미지 빌드 실패 => 로그 확인 : ${env.BUILD_URL}")
						}
					}
			    }
			}
		}

		stage('Login') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}

		stage('Push') {

			steps {
				sh 'docker push gkuer/joalarm-react'
				mattermostSend(color: "#33FFCC", message: "Dockerhub - ${env.BUILD_NUMBER}번째 Frontend 푸쉬 완료")
			}
		}

		stage('K8S Deploy') {

            steps {
                dir("./frontend") {
                    script {
                        kubernetesDeploy(configs: "joalarm-auto-deploy-react.yaml", kubeconfigId: 'Kubeconfig')
						sh './kubectl --kubeconfig=./kube-config.yaml rollout restart deployment react'
						mattermostSend(color: "#0066CC", message: "Kubernetes - ${env.BUILD_NUMBER}번째 Frontend 배포 완료")
                    }
                }
            }
        }
	}

	post {
		always {
			sh 'docker logout'
		}
	}

}